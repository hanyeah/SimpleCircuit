@page "/"
@using SimpleCircuit;
@using System.IO;
@using System.Xml;
@using System.Timers;
@inject IJSRuntime Runtime 

<div class="split-screen">
    <div class="input-script">
        <form>
            <div class="form-group">
                <textarea class="form-control" @bind="Code" @bind:event="oninput"></textarea>
            </div>
        </form>
    </div>
    <div class="svg-output">
        <style>
            path, polyline, line, circle {
                stroke: black;
                stroke-width: 0.5pt;
                fill: transparent;
                stroke-linecap: round;
                stroke-linejoin: round;
            }
            .point circle {
                fill: black;
            }
            .plane {
                stroke-width: 1pt;
            }
            text {
                font: 4pt Tahoma, Verdana, Segoe, sans-serif;
            }
        </style>
        @if (_svg != null)
            @((MarkupString)_svg)
        <p>
            <a href="javascript:void(0);" class="btn btn-primary" @onclick="DownloadSvg">Download SVG</a>
        </p>
    </div>
</div>

@code{
    private string _svg;
    private string _code;
    private Timer _timer;
    private Task _task = null;
    private SimpleCircuitParser _parser;

    public string Export { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _timer = new Timer(1000);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = false;
        _parser = new SimpleCircuitParser();
    }

    public string Code
    {
        get => _code;
        set
        {
            _code = value;
            _timer.Stop();
            _timer.Start();
        }
    }

    public async Task DownloadSvg()
    {
        // Parse it again
        var ckt = _parser.Parse(_code);
        var doc = ckt.Render();

        // Add the style to the svg file
        var style = doc.CreateElement("style", SvgDrawing.Namespace);
        style.InnerText = @"path, polyline, line, circle { stroke: black; stroke-width: 0.5pt; fill: none; stroke-linecap: round; stroke-linejoin: round; }
            .point circle { fill: black; } .plane { stroke-width: 1pt; } text { font: 4pt Tahoma, Verdana, Segoe, sans-serif; }";
        doc.DocumentElement.PrependChild(style);

        using var sw = new StringWriter();
        using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = false }))
            doc.WriteTo(xml);

        byte[] file = System.Text.Encoding.UTF8.GetBytes(sw.ToString());
        await Runtime.InvokeVoidAsync("BlazorDownloadFile", "circuit.svg", "text/plain", file);
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        // Wait for a previous task to finish
        if (_task != null && !_task.IsCompleted)
        {
            _timer.Stop();
            _timer.Start();
        }
        else
            _task = Task.Run(Render);
    }

    private void Render()
    {
        try
        {
            var ckt = _parser.Parse(_code);
            var doc = ckt.Render();
            using var sw = new StringWriter();
            using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))
                doc.WriteTo(xml);
            _svg = sw.ToString();
            Console.WriteLine("Exported succesfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Something went wrong: " + ex.Message);
        }

        // Force an update
        StateHasChanged();
    }
}