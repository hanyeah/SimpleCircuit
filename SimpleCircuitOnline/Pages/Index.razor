@page "/"
@using SimpleCircuit;
@using System.IO;
@using System.Xml;
@using System.Timers;
@inject IJSRuntime Runtime 

<div class="split-screen">
    <div class="input-script">
        <form class="full-height">
            <div class="form-group full-height">
                <textarea class="form-control full-height" @bind="Script" @bind:event="oninput"></textarea>
            </div>
        </form>
    </div>
    <div class="svg-output">
        <div style="min-height: 100px; width: 100%; text-align: center; padding: 5px; border: 1px solid #eeeeee;">
            @(_svg != null ? (MarkupString)_svg : (MarkupString)"<h2 class=\"text-muted\">Preview</h2>")
        </div>
        <p>
            <a href="javascript:void(0);" class="btn btn-primary" @onclick="DownloadSvg">Download SVG</a>
            <a href="javascript:void(0);" class="btn btn-secondary" @onclick="ToggleComponents">@(_showHelp ? "Hide components" : "Show components")</a>
        </p>
        @if (_showHelp)
        {
            <ComponentHelp />
        }
    </div>
</div>

@code{
    private string _svg;
    private string _code, _style;
    private Timer _timer;
    private Task _task = null;
    private bool _showHelp = false;
    private SimpleCircuitParser _parser;

    public string Export { get; set; }

    public string Script
    {
        get => _code;
        set
        {
            _code = value;
            _timer.Stop();
            _timer.Start();
        }
    }

    public string Style
    {
        get => _style;
        set
        {
            _style = value;
            _timer.Stop();
            _timer.Start();
        }
    }

    private void ToggleComponents()
    {
        _showHelp = !_showHelp;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _timer = new Timer(1000);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = false;
        _parser = new SimpleCircuitParser();
    }

    public async Task DownloadSvg()
    {
        // Parse it again
        var ckt = _parser.Parse(_code);
        var doc = ckt.Render();
        using var sw = new StringWriter();
        using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = false }))
            doc.WriteTo(xml);

        byte[] file = System.Text.Encoding.UTF8.GetBytes(sw.ToString());
        await Runtime.InvokeVoidAsync("BlazorDownloadFile", "circuit.svg", "text/plain", file);
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        // Wait for a previous task to finish
        if (_task != null && !_task.IsCompleted)
        {
            _timer.Stop();
            _timer.Start();
        }
        else
            _task = Task.Run(Render);
    }

    private void Render()
    {
        try
        {
            var ckt = _parser.Parse(_code);
            var doc = ckt.Render();
            using var sw = new StringWriter();
            using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))
                doc.WriteTo(xml);
            _svg = sw.ToString();
            Console.WriteLine("Exported succesfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Something went wrong: " + ex.Message);
        }

        // Force an update
        StateHasChanged();
    }
}