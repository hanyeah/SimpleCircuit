@page "/"
@using System.IO;
@using System.Xml;
@using System.Timers;
@inject IJSRuntime Runtime 

<div class="split-screen">
    <div class="input-script card">
        <div class="card-header">
            Circuit
        </div>
        <div class="card-body">
            <MonacoEditor @ref="_scriptEditor" Id="script-editor" CssClass="full-height border" OnDidChangeCursorPosition="Defer" OnKeyUp="Update" ConstructionOptions="GetStyleOptions" />
        </div>
    </div>
    <div class="input-style card">
        <div class="card-header">
            Style (CSS)
        </div>
        <div class="card-body">
            <MonacoEditor @ref="_styleEditor" Id="style-editor" CssClass="full-height border" OnDidChangeCursorPosition="Defer" OnKeyUp="Update" ConstructionOptions="GetStyleOptions" />
        </div>
    </div>
    <div class="svg-output">
        <SvgOutput Svg="@_svg" />
        <Errors Error="@_errors" Warning="@_warnings" />
        <div class="clearfix">
            <a href="javascript:void(0);" class="btn btn-primary float-right m-1" @onclick="DownloadSvg">Download SVG</a>
            <a href="javascript:void(0);" class="btn btn-secondary float-right m-1" @onclick="ToggleComponents">@(_showHelp ? "Hide components" : "Show components")</a>
        </div>
        <ComponentHelp Show="_showHelp" />
    </div>
</div>

@code
{
    private string _svg, _errors, _warnings;
    private Timer _timer;
    private Task _task = null;
    private bool _showHelp = false;
    private SimpleCircuitParser _parser;
    private MonacoEditor _scriptEditor, _styleEditor;

    private StandaloneEditorConstructionOptions GetStyleOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "text/css",
            WordWrap = "on"
        };
    }

    private void Defer()
    {
        if (_timer.Enabled)
        {
            _timer.Stop();
            _timer.Start();
        }
    }

    private void Update()
    {
        if (_timer.Enabled)
            _timer.Stop();
        _timer.Start();
    }

    private void ToggleComponents()
    {
        _showHelp = !_showHelp;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _timer = new Timer(1000);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = false;
        _parser = new SimpleCircuitParser();

        // Register our own language
        await Runtime.InvokeVoidAsync("registerLanguage");
        var model = await _scriptEditor.GetModel();
        await MonacoEditor.SetModelLanguage(model, "simpleCircuit");
        await MonacoEditorBase.SetTheme("simpleCircuitTheme");

        // Set the default values
        await _scriptEditor.SetValue(
            string.Join(Environment.NewLine, new[] {
                "// This chain starts with a ground and continues up to V1, up-right to R, right-down to C and down to another ground",
                "GND1 <u> V1(\"1V\") <u r> R(\"1k\") <r d> C1(\"1uF\") <d> GND2",
                "",
                "// Here we align the y-coordinates to make it look a little bit nicer",
                "- GND1.y = GND2.y"
                }
            ));
        await _styleEditor.SetValue(Circuit.DefaultStyle);
        await Render();
    }

    public async Task DownloadSvg()
    {
        // Parse it again
        var code = await _scriptEditor.GetValue();
        var ckt = _parser.Parse(code);
        ckt.Style = await _styleEditor.GetValue();
        var doc = ckt.Render();
        using var sw = new StringWriter();
        using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = false }))
            doc.WriteTo(xml);

        byte[] file = System.Text.Encoding.UTF8.GetBytes(sw.ToString());
        await Runtime.InvokeVoidAsync("BlazorDownloadFile", "circuit.svg", "text/plain", file);
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        // Wait for a previous task to finish
        if (_task != null && !_task.IsCompleted)
        {
            _timer.Stop();
            _timer.Start();
        }
        else
        {
            _timer.Stop();
            _task = Task.Run(Render);
        }
    }

    private async Task Render()
    {
        _errors = null;
        _warnings = null;
        try
        {
            var code = await _scriptEditor.GetValue();
            var ckt = _parser.Parse(code);
            ckt.Style = await _styleEditor.GetValue();
            if (ckt.ComponentCount > 0 || ckt.WireCount > 0)
            {
                ckt.Warning += (sender, args) => _warnings += Environment.NewLine + args.Message;
                var doc = ckt.Render();

                using var sw = new StringWriter();
                using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))
                    doc.WriteTo(xml);
                _svg = sw.ToString();
            }
            else
                _svg = null;
        }
        catch (Exception ex)
        {
            _errors = ex.Message;
            _svg = null;
        }

        // Force an update
        StateHasChanged();
    }
}