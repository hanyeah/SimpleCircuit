@page "/"
@using System.IO;
@using System.Xml;
@using System.Timers;
@inject IJSRuntime Runtime 

<div class="split-screen">
    <div class="input-script card">
        <div class="card-header">
            Circuit
        </div>
        <div class="card-body">
            <MonacoEditor @ref="_scriptEditor" Id="script-editor" CssClass="full-height border" OnKeyUp="Update" ConstructionOptions="GetStyleOptions" />
        </div>
    </div>
    <div class="input-style card">
        <div class="card-header">
            Style (CSS)
        </div>
        <div class="card-body">
            <MonacoEditor @ref="_styleEditor" Id="style-editor" CssClass="full-height border" OnKeyUp="Update" ConstructionOptions="GetStyleOptions" />
        </div>
    </div>
    <div class="svg-output">
        <SvgOutput Svg="@_svg" Loading="_loading" />
        <Errors Error="@_errors" Warning="@_warnings" />
        <div class="clearfix">
            <a href="javascript:void(0);" class="btn btn-primary float-right m-1" @onclick="DownloadSvg">Download SVG</a>
            <a href="javascript:void(0);" class="btn btn-secondary float-right m-1" @onclick="@(x => _showHelp = !_showHelp)">@(_showHelp ? "Hide components" : "Show components")</a>
            <a href="javascript:void(0);" class="btn btn-secondary float-right m-1" @onclick="@(x => _showDemo = !_showDemo)">@(_showDemo ? "Hide demo's" : "Show demo's")</a>
        </div>
        <ComponentHelp Show="_showHelp" />
        <DemoList Show="_showDemo" DemoSelected="@(x => { _scriptEditor.SetValue(x); Update(new KeyboardEvent()); })" />
    </div>
</div>

@code
{
    private string _svg, _errors, _warnings;
    private Timer _timer;
    private Task _task = null;
    private bool _showHelp = false, _showDemo = false;
    private int _loading;
    private SimpleCircuitParser _parser;
    private MonacoEditor _scriptEditor, _styleEditor;

    private StandaloneEditorConstructionOptions GetStyleOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "text/css",
            WordWrap = "on"
        };
    }

    private void Update(KeyboardEvent e)
    {
        if (_loading > 0)
        {
            _timer.Stop();
            _timer.Start();
            return;
        }

        // Ignore some key codes
        switch (e.KeyCode)
        {
            case KeyCode.DownArrow:
            case KeyCode.UpArrow:
            case KeyCode.RightArrow:
            case KeyCode.LeftArrow:
            case KeyCode.NumLock:
            case KeyCode.PageDown:
            case KeyCode.PageUp:
            case KeyCode.Shift:
            case KeyCode.Ctrl:
            case KeyCode.Alt:
            case KeyCode.CapsLock:
            case KeyCode.Escape:
            case KeyCode.Home:
            case KeyCode.Insert:
            case KeyCode.PauseBreak:
            case KeyCode.ScrollLock:
                return;
        }
        _timer.Stop();
        _timer.Start();
        _loading = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _timer = new Timer(1500);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = false;
        _parser = new SimpleCircuitParser();
        _parser.Warning += (sender, args) => _warnings += Environment.NewLine + args.Message;

        // Register our own language
        await Runtime.InvokeVoidAsync("registerLanguage");
        var model = await _scriptEditor.GetModel();
        await MonacoEditor.SetModelLanguage(model, "simpleCircuit");
        await MonacoEditorBase.SetTheme("simpleCircuitTheme");

        // Set the default values
        await _scriptEditor.SetValue(Demo.Demos[0].Code);
        await _styleEditor.SetValue(Circuit.DefaultStyle);
        await Render();
    }

    public async Task DownloadSvg()
    {
        // Parse it again
        var code = await _scriptEditor.GetValue();
        var ckt = _parser.Parse(code);
        ckt.Style = await _styleEditor.GetValue();
        var doc = ckt.Render();
        using var sw = new StringWriter();
        using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = false }))
            doc.WriteTo(xml);

        byte[] file = System.Text.Encoding.UTF8.GetBytes(sw.ToString());
        await Runtime.InvokeVoidAsync("BlazorDownloadFile", "circuit.svg", "text/plain", file);
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        // If another task is still running, restart the timer
        if (_loading > 1)
        {
            _timer.Stop();
            _timer.Start();
        }
        else
        {
            _loading = 2;
            StateHasChanged();
            _timer.Stop();
            _task =
                Task.Run(Render)
                .ContinueWith(task => { _loading = 0; StateHasChanged(); });
        }
    }

    private async Task Render()
    {
        _errors = null;
        _warnings = null;
        try
        {
            var code = await _scriptEditor.GetValue();
            var ckt = _parser.Parse(code);
            ckt.Style = await _styleEditor.GetValue();
            if (ckt.ComponentCount > 0 || ckt.WireCount > 0)
            {
                ckt.Warning += (sender, args) => _warnings += Environment.NewLine + args.Message;
                var doc = ckt.Render();

                using var sw = new StringWriter();
                using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))
                    doc.WriteTo(xml);
                _svg = sw.ToString();
            }
            else
                _svg = null;
        }
        catch (Exception ex)
        {
            _errors = ex.Message;
            _svg = null;
        }
    }
}